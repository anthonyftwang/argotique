type User @model @auth(rules: [{allow: private, provider: iam}]) {
  id: ID!
  name: String!
  email: String!
  bio: String
  joinedAt: AWSDateTime!
  UserPosts: [Post] @connection(keyName: "byUser", fields: ["id"])
  VotesFor: [UserPost] @connection(keyName: "byUser", fields: ["id"])
}

type Comment @model @auth(rules: [{allow: owner}, {allow: private, provider: iam, operations: [read]}, {allow: public, provider: iam, operations: [read]}]) @key(name: "byPost", fields: ["postID"]) {
  id: ID!
  content: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  votes: Int!
  postID: ID!
}

type Post @model @auth(rules: [{allow: owner}, {allow: private, provider: iam, operations: [read]}, {allow: public, provider: iam, operations: [read]}]) @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  title: String!
  subtitle: String!
  content: String
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  lastActivityAt: AWSDateTime!
  votes: Int!
  userID: ID!
  PostComments: [Comment] @connection(keyName: "byPost", fields: ["id"])
  VotedBy: [UserPost] @connection(keyName: "byPost", fields: ["id"])
}

type UserPost @model(queries: null) @key(name: "byUser", fields: ["userID", "postID"]) @key(name: "byPost", fields: ["postID", "userID"]) @auth(rules: [{allow: owner}, {allow: private, provider: iam, operations: [read]}, {allow: public, provider: iam, operations: [read]}]) {
  id: ID!
  userID: ID!
  postID: ID!
  user: User! @connection(fields: ["userID"])
  post: Post! @connection(fields: ["postID"])
}
  